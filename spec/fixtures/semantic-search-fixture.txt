HTTP/1.1 200 OK
Server: nginx/1.13.9
Date: Sat, 24 Nov 2018 16:43:44 GMT
Content-Type: application/json
Content-Length: 21512
X-GitHub-Backend: Kubernetes
X-GitHub-Request-Id: DA86:1724:1134D:60AE0:5BF97FC0

{"results":[{"distance":"0.5385","function_blob":"def _run_sql_query(self, sql):\n    if not self.utils.sql_url:\n        Log.error(\n            'This test requires a `sql_url` parameter in the settings file')\n    test = Data(data=simple_test_data)\n    self.utils.fill_container(test)\n    sql = sql.replace(TEST_TABLE, test.query['from'])\n    url = URL(self.utils.sql_url)\n    response = self.utils.post_till_response(str(url), json={'meta': {\n        'testing': True}, 'sql': sql})","nwo":"klahnakoski/ActiveData","url":"https://github.com/klahnakoski/ActiveData/blob/master/tests/test_sql.py#L84\n"},{"distance":"0.5403","function_blob":"def execute_sql(self, query, *, explain=False):\n    if explain is True:\n        from ws.db.database import explain\n        result = self.db.engine.execute(explain(query))\n        print(query)\n        for row in result:\n            print(row[0])\n    return self.db.engine.execute(query)\n","nwo":"lahwaacz/wiki-scripts","url":"https://github.com/lahwaacz/wiki-scripts/blob/master/ws/db/selects/SelectBase.py#L32\n"},{"distance":"0.5524","function_blob":"def execute_query_on_table(filedb, tablename, post_process_func,\n    expected_result):\n    results = filedb.execute_query(tablename, 10, post_process_func=\n        post_process_func)\n    assert results.fetchall() == expected_result\n","nwo":"iagcl/data_pipeline","url":"https://github.com/iagcl/data_pipeline/blob/master/tests/db/test_filedb.py#L85\n"},{"distance":"0.5561","function_blob":"def run_sql(self, query, db, message, params=None, output=None):\n    return self.run_sql_output\n","nwo":"Yelp/mycroft","url":"https://github.com/Yelp/mycroft/blob/master/mycroft/tests/batch/test_s3_to_redshift.py#L209\n"},{"distance":"0.5582","function_blob":"def _run_sql(self):\n    try:\n        q = self.db.execute_sql(self.sql_string, require_commit=False)\n    except Exception as e:\n        print(type(e))\n        print(str(e))\n    else:\n        if q.description:\n            titles = [i[0] for i in q.description]\n            rows = q.fetchall()","nwo":"hsz1273327/TutorialForPython","url":"https://github.com/hsz1273327/TutorialForPython/blob/master/ipynbs/\u4eba\u673a\u4ea4\u4e92/GUI/src/sqlshell.py#L21\n"},{"distance":"0.5584","function_blob":"def __execute_query(self, query):\n    pass_string = ''\n    if self.mysql_root_pass:\n        pass_string = '--password=\"%s\" ' % self.mysql_root_pass\n    result = self.execute('mysql -u %s %s-E -e \"%s\" mysql' % (self.\n        mysql_root_user, pass_string, query), stdout=False, sudo=True)\n    rows = self.__get_rows(result)\n    return rows\n","nwo":"python-provy/provy","url":"https://github.com/python-provy/provy/blob/master/provy/more/debian/database/mysql.py#L71\n"},{"distance":"0.5595","function_blob":"def execute_query(self, statement):\n    \"\"\"Suche ausf\u00fchren\"\"\"\n    cursor = self.open()\n    cursor.execute(statement)\n    result = cursor.fetchall()\n    self.close()\n    return result\n","nwo":"bablokb/mtv_cli","url":"https://github.com/bablokb/mtv_cli/blob/master/files/usr/local/bin/mtv_filmdb.py#L240\n"},{"distance":"0.5611","function_blob":"def execute_query(self, query, arraysize, values=(), post_process_func=None):\n    self._logger.debug(\"Executing query '{q}'\\nBind values = {v}\".format(q=\n        query, v=values))\n    self._cursor.arraysize = arraysize\n    self._cursor.execute(query, values)\n    query_results = DbQueryResults(self._cursor)\n    self._logger.debug('Query execution complete')\n    return query_results\n","nwo":"iagcl/data_pipeline","url":"https://github.com/iagcl/data_pipeline/blob/master/data_pipeline/db/postgresdb.py#L96\n"},{"distance":"0.5616","function_blob":"def execute(self, query, params=None):\n    query = _fix_query(query)\n    params = _fix_params(params)\n    return self.cursor.execute(query, params)\n","nwo":"aaugustin/django-pymssql","url":"https://github.com/aaugustin/django-pymssql/blob/master/sqlserver_pymssql/base.py#L52\n"},{"distance":"0.5630","function_blob":"def run(self, query):\n    q = Query.start(query, **self.options)\n    try:\n        columns = q.columns()\n        if columns is None:\n            return [], []\n        rows = []\n        map(rows.append, q.results())\n        return columns, rows\n    finally:","nwo":"treasure-data/prestogres","url":"https://github.com/treasure-data/prestogres/blob/master/prestogres/pgsql/presto_client.py#L346\n"},{"distance":"0.5630","function_blob":"def _execute(self, query, external_tables=(), results=True):\n    if isinstance(query, DDL):\n        query = query.compile()\n    self.log(query)\n    response = self.con.process_ordinary_query(query, columnar=True,\n        with_column_types=True, external_tables=external_tables)\n    if not results:\n        return response\n    data, columns = response\n    colnames, typenames = czip(*columns)","nwo":"cloudera/ibis","url":"https://github.com/cloudera/ibis/blob/master/ibis/clickhouse/client.py#L156\n"},{"distance":"0.5632","function_blob":"def _execute_raw(self, query, args=()):\n    self._cursor.execute(query, args)\n","nwo":"rmrector/script.artwork.beef","url":"https://github.com/rmrector/script.artwork.beef/blob/master/lib/libs/processeditems.py#L101\n"},{"distance":"0.5636","function_blob":"def execute(self, query, silent=False):\n    if silent:\n        self.cursor.execute(query)\n        self.cursor.commit()\n        return True\n    return self.cursor.execute(query)\n","nwo":"fcappdev/OpenAgClassifier","url":"https://github.com/fcappdev/OpenAgClassifier/blob/master/src/model/base/database.py#L36\n"},{"distance":"0.5669","function_blob":"def _run_sql(self, sql_list):\n    for sql in sql_list:\n        self.cursor.execute(sql)\n","nwo":"skozlovf/anki_deck","url":"https://github.com/skozlovf/anki_deck/blob/master/anki_deck/apkg.py#L283\n"},{"distance":"0.5678","function_blob":"def execute(self, query, args=''):\n    return self.db_cursor.execute(query, args)\n","nwo":"neoatmatrix/cold_collection","url":"https://github.com/neoatmatrix/cold_collection/blob/master/sql.py#L168\n"},{"distance":"0.5678","function_blob":"def run_sql(query):\n    cursor = connection.cursor()\n    cursor.execute(query)\n","nwo":"theirc/CTS","url":"https://github.com/theirc/CTS/blob/master/shipments/db_views.py#L9\n"},{"distance":"0.5679","function_blob":"def execute(self, sql_query=None):\n    if not sql_query:\n        raise DatabaseOperationError\n    try:\n        self.cursor.execute(sql_query)\n    except DatabaseOperationError:\n        pass\n","nwo":"xsank/bottle","url":"https://github.com/xsank/bottle/blob/master/brick/db.py#L31\n"},{"distance":"0.5682","function_blob":"def _execute(self, query, parameters, kwparameters, debug=False):\n    if parameters and kwparameters:\n        raise ValueError(\n            'database.py querying functions can receive *args or **kwargs, but not both'\n            )\n    query = escape_query(query, parameters or kwparameters)\n    if debug:\n        print(query)\n    self._ensure_connected()\n    self._db.query(query)","nwo":"memsql/memsql-python","url":"https://github.com/memsql/memsql-python/blob/master/memsql/common/database.py#L159\n"},{"distance":"0.5683","function_blob":"def run_query(self, query, user):\n    connection = cx_Oracle.connect(self.connection_string)\n    connection.outputtypehandler = Oracle.output_handler\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        rows_count = cursor.rowcount\n        if cursor.description is not None:\n            columns = self.fetch_columns([(i[0], Oracle.get_col_type(i[1],\n                i[5])) for i in cursor.description])","nwo":"getredash/redash","url":"https://github.com/getredash/redash/blob/master/redash/query_runner/oracle.py#L137\n"},{"distance":"0.5689","function_blob":"def execute(self, query, rows=1):\n    if self._log_executed_queries:\n        self._logged_queries.append(query)\n    for pattern, result in self.results.iteritems():\n        if pattern.search(query):\n            return result\n    return []\n","nwo":"CartoDB/dataservices-api","url":"https://github.com/CartoDB/dataservices-api/blob/master/server/lib/python/cartodb_services/test/mock_plpy.py#L68\n"},{"distance":"0.5701","function_blob":"def execute_query(self):\n    old_stdout = sys.stdout\n    redirected_output = sys.stdout = StringIO()\n    try:\n        exec(self.script, locals(), globals())\n    except SyntaxError:\n        raise ValueError(\n            'Experiment description malformed (Incorrect statement ordering): check your syntax'\n            )\n    sys.stdout = old_stdout","nwo":"GiulioRossetti/ndlib","url":"https://github.com/GiulioRossetti/ndlib/blob/master/ndlib/parser/ExperimentParser.py#L119\n"},{"distance":"0.5710","function_blob":"def execute(self):\n    with self.client._execute(self.compiled_sql, results=True,\n        query_parameters=self.query_parameters) as cur:\n        result = self._fetch(cur)\n    return self._wrap_result(result)\n","nwo":"ibis-project/ibis","url":"https://github.com/ibis-project/ibis/blob/master/ibis/bigquery/client.py#L156\n"},{"distance":"0.5721","function_blob":"def execute_parameters(conn, query, parameters):\n    logger.debug(\"execute_parameters(query='%s',parameters=%s)\", query, str\n        (parameters))\n    cursor = conn.cursor()\n    cursor.execute(query, parameters)\n    conn.commit()\n    cursor.close()\n","nwo":"conejoninja/plugin.video.pelisalacarta","url":"https://github.com/conejoninja/plugin.video.pelisalacarta/blob/master/core/database.py#L77\n"},{"distance":"0.5723","function_blob":"def execute_values(self, query, query_data):\n    with self.conn.cursor() as cur:\n        psycopg2.extras.execute_values(cur, query, query_data)\n","nwo":"verejnedigital/verejne.digital","url":"https://github.com/verejnedigital/verejne.digital/blob/master/data/db/db.py#L21\n"},{"distance":"0.5754","function_blob":"def execute(self, sql):\n    print('Executing SQL: `{}`'.format(sql))\n    return self\n","nwo":"christabor/MoAL","url":"https://github.com/christabor/MoAL/blob/master/MOAL/software_engineering/problem_solving/design_patterns/grasp/pattern_protected_variation.py#L42\n"},{"distance":"0.5769","function_blob":"def execute_sql(sql):\n    engine = create_engine(test_config['conn_dwh'])\n    conn = engine.raw_connection()\n    cursor = conn.cursor(cursor_factory=DictCursor)\n    cursor.execute(sql)\n    result = cursor.fetchall()\n    conn.commit()\n    cursor.close()\n    return result\n","nwo":"NLHEALTHCARE/PYELT","url":"https://github.com/NLHEALTHCARE/PYELT/blob/master/tests/old/unit_tests_rob/test07r_jsonb.py#L196\n"},{"distance":"0.5772","function_blob":"def execute(self, sql, params=None):\n    return self.__execute(sql, params)\n","nwo":"XvBMC/repository.xvbmc","url":"https://github.com/XvBMC/repository.xvbmc/blob/master/Dependencies/script.module.image_cache/lib/local_lib/db_utils.py#L77\n"},{"distance":"0.5776","function_blob":"def run_query(self, query):\n    result = self.output()\n    result_url = None\n    if isinstance(result, ResultTarget):\n        result_url = result.get_result_url()\n    client = self.config.get_client()\n    job = client.query(self.database, query, priority=self.priority,\n        retry_limit=self.retry_limit, type=self.type, result_url=result_url)\n    job.update()\n    logger.info('%s: td.job.url: %s', self, job.url)","nwo":"treasure-data/luigi-td","url":"https://github.com/treasure-data/luigi-td/blob/master/luigi_td/task.py#L73\n"},{"distance":"0.5777","function_blob":"def _execute_sql(self, sql, args=()):\n    cursor = self._archive.cursor()\n    cursor.execute(sql, args)\n    return cursor\n","nwo":"czcorpus/kontext","url":"https://github.com/czcorpus/kontext/blob/master/lib/plugins/ucnk_conc_persistence2/__init__.py#L197\n"},{"distance":"0.5778","function_blob":"def _execute(self, query, params):\n    try:\n        cursor = self.con.cursor()\n        cursor.execute(query, params)\n        return cursor.fetchall()\n    finally:\n        cursor.close()\n","nwo":"PLOS/rhino","url":"https://github.com/PLOS/rhino/blob/master/src/main/python/dbschema/migrate.py#L90\n"},{"distance":"0.5779","function_blob":"def execute(self, sql, params=None):\n    return self.database.execute_sql(sql, params)\n","nwo":"coleifer/peewee","url":"https://github.com/coleifer/peewee/blob/master/tests/base.py#L188\n"},{"distance":"0.5787","function_blob":"def execute(self, sql):\n    self.cursor.execute(sql)\n    results = self.cursor.fetchall()\n    return results\n","nwo":"CreditEaseDBA/Themis","url":"https://github.com/CreditEaseDBA/Themis/blob/master/rule_analysis/db/db_operat.py#L53\n"},{"distance":"0.5789","function_blob":"def execute(self, query):\n    cur = self._conn.cursor()\n    cur.execute(self.prepare_sql(query.sql))\n    if cur.description:\n        query.description = cur.description\n        query.result = cur.fetchall()\n    else:\n        query.rowcount = cur.rowcount\n        query.description = query.result = None\n    cur.close()","nwo":"andialbrecht/runsqlrun","url":"https://github.com/andialbrecht/runsqlrun/blob/master/rsr/connections/backends/base.py#L33\n"},{"distance":"0.5789","function_blob":"def _execute_query(self, sql, schema, catalog):\n    if not sql:\n        raise InvalidArgumentError('SQL query missing')\n    if not self.server:\n        raise InvalidArgumentError('Server IP missing')\n    if not self.user:\n        raise InvalidArgumentError('Username missing')\n    self._clear_old_results()\n    headers = {'X-Presto-Catalog': catalog, 'X-Presto-Schema': schema,\n        'X-Presto-User': self.user, 'X-Presto-Source': 'presto-admin'}","nwo":"prestodb/presto-admin","url":"https://github.com/prestodb/presto-admin/blob/master/prestoadmin/prestoclient.py#L102\n"},{"distance":"0.5814","function_blob":"def execute_query(self, query, query_name, table_output=False):\n    query_dict = {}\n    if table_output is False:\n        query_dict = {'query': query, 'timeoutMs': 1000000}\n    else:\n        query_dict = {'configuration': {'query': {'query': query,\n            'allowLargeResults': 'true', 'destinationTable': {'projectId':\n            self.project_name, 'datasetId': self.qc_dataset, 'tableId':\n            query_name}}}}\n    query_request = self.service.jobs()","nwo":"StanfordBioinformatics/bigquery-genomics-qc","url":"https://github.com/StanfordBioinformatics/bigquery-genomics-qc/blob/master/BigQueryClient.py#L57\n"},{"distance":"0.5815","function_blob":"def run_query(conn, query, outputFile, no_header=False, comment_char='#'):\n    cur = conn.cursor()\n    results = cur.execute(query)\n    if outputFile is not None:\n        if not no_header:\n            outputFile.write('%s%s\\n' % (comment_char, '\\t'.join([str(col[0\n                ]) for col in cur.description])))\n        for i, row in enumerate(results):\n            outputFile.write('%s\\n' % '\\t'.join([(str(val) if val is not\n                None else '') for val in row]))","nwo":"galaxyproject/tools-iuc","url":"https://github.com/galaxyproject/tools-iuc/blob/master/tools/query_tabular/query_db.py#L59\n"},{"distance":"0.5822","function_blob":"def execute(self, sql, params=None):\n    if not params:\n        params = tuple()\n    sql = sql % (('?',) * len(params))\n    self.cursor.execute(sql, params)\n","nwo":"beachmachine/django-jython","url":"https://github.com/beachmachine/django-jython/blob/master/doj/db/backends/__init__.py#L181\n"},{"distance":"0.5830","function_blob":"def run_query(self, query, parameters={}, cast=True, check_errors=True):\n    if parameters:\n        query = self._process_parameters(query, parameters)\n    query = self.CATCH_ERRORS + query\n    session = subprocess.Popen(['sqlplus', '-S', '-L', '-M', 'HTML ON',\n        self._get_connection_url()], stdin=subprocess.PIPE, stdout=\n        subprocess.PIPE, stderr=subprocess.PIPE)\n    if self.encoding:\n        session.stdin.write(query.encode(self.encoding))\n    else:","nwo":"c4s4/sqlplus_commando","url":"https://github.com/c4s4/sqlplus_commando/blob/master/sqlplus_commando/sqlplus_commando.py#L37\n"},{"distance":"0.5843","function_blob":"def run(self, table, query):\n    self.client.table = table\n    response = self.client.get(str(query))\n    return response\n","nwo":"pearsontechnology/st2contrib","url":"https://github.com/pearsontechnology/st2contrib/blob/master/packs/servicenow/actions/get_non_structured.py#L5\n"},{"distance":"0.5843","function_blob":"def _execute(self, sql, params, *ignored_wrapper_args):\n    self.db.validate_no_broken_transaction()\n    with self.db.wrap_database_errors:\n        if params is None:\n            return self.cursor.execute(sql)\n        else:\n            return self.cursor.execute(sql, params)\n","nwo":"AnhellO/DAS_Sistemas","url":"https://github.com/AnhellO/DAS_Sistemas/blob/master/Ago-Dic-2017/Enrique#L79\n"},{"distance":"0.5848","function_blob":"def run(self, table, query):\n    self.client.table = table\n    response = self.client.get(query)\n    return response\n","nwo":"pearsontechnology/st2contrib","url":"https://github.com/pearsontechnology/st2contrib/blob/master/packs/servicenow/actions/get.py#L5\n"},{"distance":"0.5852","function_blob":"def execute(self, sql, args):\n    cursor = self._db.cursor()\n    cursor.execute(sql, args)\n    return cursor\n","nwo":"czcorpus/kontext","url":"https://github.com/czcorpus/kontext/blob/master/lib/plugins/ucnk_subc_restore/__init__.py#L53\n"},{"distance":"0.5858","function_blob":"def run_query(self, query, user):\n    connection = self.connect_database()\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        columns = self.fetch_columns([(i[0], TYPES_MAP.get(i[1], None)) for\n            i in cursor.description])\n        rows = [dict(zip((c['name'] for c in columns), row)) for row in cursor]\n        data = {'columns': columns, 'rows': rows}\n        error = None","nwo":"getredash/redash","url":"https://github.com/getredash/redash/blob/master/redash/query_runner/mapd.py#L80\n"},{"distance":"0.5861","function_blob":"def run_query_sync(data_source, parameter_values, query_text, max_age=0):\n    query_parameters = set(collect_query_parameters(query_text))\n    missing_params = set(query_parameters) - set(parameter_values.keys())\n    if missing_params:\n        raise Exception('Missing parameter value for: {}'.format(', '.join(\n            missing_params)))\n    if query_parameters:\n        query_text = pystache.render(query_text, parameter_values)\n    if max_age <= 0:\n        query_result = None","nwo":"getredash/redash","url":"https://github.com/getredash/redash/blob/master/redash/handlers/query_results.py#L27\n"},{"distance":"0.5861","function_blob":"def run_query_sync(data_source, parameter_values, query_text, max_age=0):\n    query_parameters = set(collect_query_parameters(query_text))\n    missing_params = set(query_parameters) - set(parameter_values.keys())\n    if missing_params:\n        raise Exception('Missing parameter value for: {}'.format(', '.join(\n            missing_params)))\n    if query_parameters:\n        query_text = pystache.render(query_text, parameter_values)\n    if max_age <= 0:\n        query_result = None","nwo":"getredash/redash","url":"https://github.com/getredash/redash/blob/master/redash/handlers/embed.py#L26\n"},{"distance":"0.5868","function_blob":"@transaction.atomic\ndef execute(sql_command):\n    results = []\n    if sql_command:\n        with connection.cursor() as cursor:\n            sql_commands = sql_command.split(';')\n            for count, command in enumerate(sql_commands):\n                if command.strip():\n                    try:\n                        cursor.execute(command.strip())","nwo":"uclouvain/osis","url":"https://github.com/uclouvain/osis/blob/master/base/models/utils/native.py#L30\n"},{"distance":"0.5868","function_blob":"def execute_sql(conn, stmt, params):\n    c = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\n    c.execute(stmt, params)\n    result = c.fetchall()\n    c.close()\n    return result\n","nwo":"InfraBox/infrabox","url":"https://github.com/InfraBox/infrabox/blob/master/src/github/review/review.py#L14\n"},{"distance":"0.5871","function_blob":"def execute(self, context):\n    table = bq.Table(self.table, context=None)\n    if not table.exists():\n        table.create(schema=self.schema)\n    kwargs = {}\n    if 'delimiter' in self.csv_options:\n        kwargs['delimiter'] = self.csv_options['delimiter']\n    if 'skip' in self.csv_options:\n        kwargs['skip_leading_rows'] = self.csv_options['skip']\n    if 'strict' in self.csv_options:","nwo":"googledatalab/pydatalab","url":"https://github.com/googledatalab/pydatalab/blob/master/google/datalab/contrib/bigquery/operators/_bq_load_operator.py#L43\n"},{"distance":"0.5875","function_blob":"def run(query):\n    results = pd.read_sql('{}'.format(query), con).fillna(' ')\n    return results\n","nwo":"DaveBackus/Data_Bootcamp","url":"https://github.com/DaveBackus/Data_Bootcamp/blob/master/Code/SQL/SQL_support_code.py#L33\n"},{"distance":"0.5876","function_blob":"def execute(self, query, args=None):\n    result = super(DictCursor, self).execute(query, args)\n    if self.description:\n        self._fields = [field[0] for field in self.description]\n    return result\n","nwo":"openaire/iis","url":"https://github.com/openaire/iis/blob/master/iis-3rdparty-madis/src/main/resources/eu/dnetlib/iis/3rdparty/scripts/madis/lib/pymysql/cursors.py#L261\n"}]}
